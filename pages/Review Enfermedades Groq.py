import os
import logging
import streamlit as st
import nest_asyncio
import asyncio
from crewai import Agent, Task, Crew, Process
from langchain_groq import ChatGroq
from langchain_google_genai import ChatGoogleGenerativeAI

# Configure logging
logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                    level=logging.DEBUG,
                    handlers=[logging.StreamHandler()])

# Apply nest_asyncio to manage nested event loops
nest_asyncio.apply()

# Set page config
st.set_page_config(page_title='Ranvier - Kronika', page_icon='üß†')
st.title("Revisi√≥n de Enfermedades por IA ‚ú® ")
st.write(
    "Bienvenido a los sitios de habilidades de IA de Ranvier-Kronika. Usa la barra lateral para navegar a diferentes p√°ginas."
)


# Function to load CSS
def load_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
            logging.info(f"Loaded CSS file: {file_name}")
    except FileNotFoundError:
        logging.error(f"CSS file {file_name} not found.")
        st.error(f"CSS file {file_name} not found.")


# Load the CSS file
load_css("styles.css")

with st.expander('Acerca de esta aplicaci√≥n'):
    st.markdown('''
    **¬øQu√© puede hacer esta aplicaci√≥n?**
    Esta aplicaci√≥n permite a los usuarios iniciar un proceso de investigaci√≥n integral sobre enfermedades espec√≠ficas utilizando agentes de CrewAI. Los agentes recopilar√°n, analizar√°n y compilar√°n la informaci√≥n en una revisi√≥n coherente.

    **¬øC√≥mo usar la aplicaci√≥n?**
    1. Ingresa el nombre de una enfermedad en el campo de entrada.
    2. Haz clic en el bot√≥n "Iniciar Revisi√≥n" para comenzar el proceso.
    3. Los resultados se mostrar√°n una vez que la investigaci√≥n est√© completa.
    ''')
    logging.info("Displayed information about the application.")

# Ensure there is an event loop
try:
    loop = asyncio.get_event_loop()
except RuntimeError as e:
    if "There is no current event loop in thread" in str(e):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    logging.debug("Created a new event loop.")

# Retrieve the API key from environment variables
groq_api_key = os.getenv('GROQ_API_KEY')
google_api_key = os.getenv('GOOGLE_API_KEY')

if not google_api_key:
    st.error(
        "GOOGLE_API_KEY environment variable not set. Please set the GOOGLE_API_KEY environment variable."
    )
    st.stop()

if not groq_api_key:
    st.error(
        "La variable de entorno GROQ_API_KEY no est√° configurada. Por favor, configura la variable de entorno GROQ_API_KEY en Replit secrets."
    )
    logging.error("GROQ_API_KEY environment variable not set.")
    st.stop()

logging.info("GROQ_API_KEY environment variable retrieved successfully.")

# Set up the customization options
st.sidebar.title('Personalizaci√≥n')
model = st.sidebar.selectbox(
    'Elige un modelo',
    ['llama3-8b-8192', 'mixtral-8x7b-32768', 'gemma-7b-it', 'llama3-70b-8192'])
logging.info(f"Model selected: {model}")

# Initialize the language model with Groq
llm = ChatGroq(
    temperature=0, 
    groq_api_key = os.getenv("GROQ_API_KEY"), 
    model_name=model
)
logging.info("Initialized language model with Groq.")

# Define agents with verbose mode and backstories
investigador = Agent(
    role='Epidemi√≥logo e Investigador Cl√≠nico',
    goal=
    'Realizar una investigaci√≥n profunda sobre los aspectos cl√≠nicos y epidemiol√≥gicos de {disease_name}',
    tools=[],
    verbose=True,
    backstory=
    ("Un epidemi√≥logo experimentado con amplia experiencia en la investigaci√≥n de enfermedades infecciosas y condiciones cr√≥nicas. "
     "Tu objetivo es recopilar datos cl√≠nicos completos, estad√≠sticas epidemiol√≥gicas y conocimientos sobre {disease_name}. "
     "Te centrar√°s en: \n"
     "1. Caracter√≠sticas cl√≠nicas: s√≠ntomas, progresi√≥n, pron√≥stico.\n"
     "2. Epidemiolog√≠a: incidencia, prevalencia, poblaciones de alto riesgo, factores de riesgo y causas.\n"
     "3. Diagn√≥stico: m√©todos diagn√≥sticos, hallazgos clave, pruebas de laboratorio y estudios de imagen."
     ),
    llm=llm,
    allow_delegation=False)

analista = Agent(
    role='Analista de Tratamiento y Sintetizador de Datos',
    goal=
    'Analizar los datos recopilados y sintetizarlos en conocimientos pr√°cticos sobre el manejo y los resultados de {disease_name}',
    tools=[],
    verbose=True,
    backstory=
    ("Un experto en an√°lisis de datos m√©dicos y predicci√≥n de resultados. Tu tarea es analizar las opciones de tratamiento, las complicaciones potenciales y "
     "las estrategias de seguimiento para {disease_name}. Te centrar√°s en: \n"
     "1. Enfoques de tratamiento: m√©dicos, quir√∫rgicos, cuidado multidisciplinario.\n"
     "2. Complicaciones y seguimiento: complicaciones clave, planes de monitoreo, factores que influyen en los resultados.\n"
     "3. Recursos basados en evidencia: libros de texto m√©dicos, art√≠culos de revistas, gu√≠as y opiniones de expertos."
     ),
    llm=llm,
    allow_delegation=False)

escritor = Agent(
    role='Escritor M√©dico y Revisor Jefe',
    goal=
    'Compilar y estructurar los hallazgos en una revisi√≥n m√©dica coherente y completa',
    tools=[],
    verbose=True,
    backstory=
    ("Un escritor m√©dico competente con habilidad para sintetizar informaci√≥n m√©dica compleja en documentos claros y concisos. "
     "Tu tarea es escribir una revisi√≥n detallada sobre {disease_name}, incorporando: \n"
     "1. Caracter√≠sticas cl√≠nicas y epidemiolog√≠a.\n"
     "2. Fisiopatolog√≠a y diagn√≥stico.\n"
     "3. Estrategias de manejo y complicaciones.\n"
     "4. Aplicaciones cl√≠nicas y ayudas para la toma de decisiones."),
    llm=ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0),
    allow_delegation=False)

logging.info("Agents defined successfully.")

# Define tasks
recopilar_caracteristicas_clinicas = Task(
    description=
    'Recopilar informaci√≥n detallada sobre los signos, s√≠ntomas y manifestaciones cl√≠nicas de {disease_name}',
    expected_output=
    'Una lista completa de caracter√≠sticas cl√≠nicas y la progresi√≥n de {disease_name}',
    agent=investigador,
    context=[])

determinar_epidemiologia = Task(
    description=
    'Determinar la incidencia, prevalencia y factores de riesgo asociados con {disease_name}',
    expected_output=
    'Un resumen detallado de datos epidemiol√≥gicos de {disease_name}',
    agent=investigador,
    context=[recopilar_caracteristicas_clinicas])

revisar_fisiopatologia = Task(
    description=
    'Revisar los mecanismos biol√≥gicos y factores que conducen a {disease_name}',
    expected_output=
    'Una explicaci√≥n detallada de la fisiopatolog√≠a de {disease_name}',
    agent=investigador,
    context=[determinar_epidemiologia])

familiarizarse_evaluacion_diagnostica = Task(
    description=
    'Familiarizarse con los m√©todos diagn√≥sticos, hallazgos clave y pruebas especializadas para {disease_name}',
    expected_output=
    'Una lista completa de estrategias diagn√≥sticas para {disease_name}',
    agent=investigador,
    context=[revisar_fisiopatologia])

revisar_enfoques_manejo = Task(
    description=
    'Revisar los tratamientos m√©dicos y quir√∫rgicos, y el cuidado multidisciplinario para {disease_name}',
    expected_output='Un resumen de enfoques de manejo para {disease_name}',
    agent=analista,
    context=[familiarizarse_evaluacion_diagnostica])

reconocer_complicaciones = Task(
    description=
    'Reconocer las complicaciones potenciales, planes de monitoreo y estrategias de seguimiento para {disease_name}',
    expected_output=
    'Una lista detallada de complicaciones y estrategias de seguimiento para {disease_name}',
    agent=analista,
    context=[revisar_enfoques_manejo])

sintetizar_informacion = Task(
    description=
    'Sintetizar toda la informaci√≥n recopilada en una revisi√≥n completa de {disease_name}',
    expected_output=
    'Un documento bien estructurado, en markdown, en espa√±ol, que integre el conocimiento en el razonamiento cl√≠nico para {disease_name} y finalmente entregue 10 take-home messages o Perlas Clinicas para recordar.',
    agent=escritor,
    context=[
        recopilar_caracteristicas_clinicas, determinar_epidemiologia,
        revisar_fisiopatologia, familiarizarse_evaluacion_diagnostica,
        revisar_enfoques_manejo, reconocer_complicaciones
    ])

logging.info("Tasks defined successfully.")

# Crear el crew
crew = Crew(agents=[investigador, analista, escritor],
            tasks=[
                recopilar_caracteristicas_clinicas, determinar_epidemiologia,
                revisar_fisiopatologia, familiarizarse_evaluacion_diagnostica,
                revisar_enfoques_manejo, reconocer_complicaciones,
                sintetizar_informacion
            ],
            process=Process.sequential)

logging.info("Crew created successfully.")

# Entrada de Streamlit
disease_name = st.text_input("Ingresa una enfermedad o s√≠ndrome:", "")

if st.button("Iniciar Revisi√≥n"):
    if disease_name:
        st.write(f"Investigando {disease_name}...")
        inputs = {"disease_name": disease_name}
        try:
            with st.spinner('Ejecutando tareas de CrewAI...'):
                result = crew.kickoff(inputs=inputs)
                st.success("Investigaci√≥n completada!")

                detailed_results = []
                for task in crew.tasks:
                    task_result = task.output
                    detailed_results.append({
                        "task": task.description,
                        "result": task_result
                    })

                # Guardar resultados detallados y resultado de investigaci√≥n en el estado de la sesi√≥n
                st.session_state['detailed_results'] = detailed_results
                st.session_state['research_result'] = result
                logging.info("Research completed successfully.")
        except Exception as e:
            st.error(f"Ocurri√≥ un error: {str(e)}")
            logging.error(f"Error during research: {str(e)}")
    else:
        st.warning("Por favor, ingresa el nombre de una enfermedad.")
        logging.warning("No disease name entered.")

# Mostrar resultado de investigaci√≥n
if 'research_result' in st.session_state:
    st.write(st.session_state['research_result'])
    logging.info("Displayed research result.")

# Mostrar resultados detallados en un expander
if 'detailed_results' in st.session_state:
    with st.expander("Mostrar resultados detallados"):
        for detail in st.session_state['detailed_results']:
            st.write(f"**Tarea:** {detail['task']}")
            st.write(f"**Resultado:** {detail['result']}")
            st.write("---")
        logging.info("Displayed detailed results.")
